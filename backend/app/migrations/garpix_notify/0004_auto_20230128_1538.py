# Generated by Django 3.1 on 2023-01-28 12:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('garpix_notify', '0003_auto_20220303_1547'),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemNotify',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='', max_length=255, verbose_name='Название')),
                ('state', models.IntegerField(choices=[(1, 'Доставлено'), (-1, 'Отклонено'), (0, 'В ожидании'), (-2, 'Не отправлено (отправка запрещена настройками)')], default=0, verbose_name='Состояние')),
                ('event', models.IntegerField(blank=True, choices=[(1, 'Example')], null=True, verbose_name='Событие')),
                ('room_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название комнаты')),
                ('type', models.IntegerField(blank=True, choices=[(0, 'E-mail'), (1, 'SMS'), (2, 'Push'), (3, 'Telegram'), (4, 'Viber'), (5, 'System'), (6, 'Call'), (7, 'WhatsApp')], default=5, verbose_name='Тип')),
                ('data_json', models.JSONField(blank=True, default=dict, null=True, verbose_name='Данные JSON')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата отправки')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='system_notifies', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь (получатель)')),
            ],
            options={
                'verbose_name': 'Ситемное уведомление',
                'verbose_name_plural': 'Системные уведомления',
            },
        ),
        migrations.AlterModelOptions(
            name='notifyerrorlog',
            options={'verbose_name': 'Лог отправки уведомления', 'verbose_name_plural': 'Логи отправки уведомления'},
        ),
        migrations.AlterModelOptions(
            name='notifyuserlistparticipant',
            options={'verbose_name': 'Дополнительный участник списка рассылки', 'verbose_name_plural': 'Дополнительные участники списка рассылки'},
        ),
        migrations.RemoveField(
            model_name='notifyconfig',
            name='sms_url',
        ),
        migrations.AddField(
            model_name='notify',
            name='is_delete_after',
            field=models.BooleanField(default=False, verbose_name='Удалять после отправки'),
        ),
        migrations.AddField(
            model_name='notify',
            name='users_list',
            field=models.ManyToManyField(blank=True, to='garpix_notify.NotifyUserList', verbose_name='Списки пользователей для рассылки'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='call_api_id',
            field=models.CharField(blank=True, default='1234567890', max_length=255, verbose_name='API ID оператора связи'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='call_login',
            field=models.CharField(blank=True, default='', max_length=255, verbose_name='Логин/Индетификатор сервиса оператора связи'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='call_password',
            field=models.CharField(blank=True, default='', max_length=255, verbose_name='Пароль/Секретный ключ оператора связи'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='call_url_type',
            field=models.IntegerField(choices=[(0, 'sms.ru API'), (1, 'sms.ru LOGIN'), (2, 'smsc.ru'), (3, 'ucaller.ru')], default=0, verbose_name='URL звонка провайдера'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='email_malling',
            field=models.IntegerField(choices=[(0, 'Обычная рассылка'), (1, 'Скрытая рассылка')], default=1, help_text='Если выбрана обычная рассылка, то пользователи будут видеть email друг друга', verbose_name='Тип массовой рассылки'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='is_call_enabled',
            field=models.BooleanField(default=True, verbose_name='Разрешить отправку звонков'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='is_whatsapp_enabled',
            field=models.BooleanField(default=True, verbose_name='Разрешить отправку WhatsApp'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='sms_login',
            field=models.CharField(blank=True, default='', max_length=255, verbose_name='Логин пользователя СМС провайдера'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='sms_password',
            field=models.CharField(blank=True, default='', max_length=255, verbose_name='Пароль для api СМС провайдера'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='sms_url_type',
            field=models.IntegerField(choices=[(0, 'sms.ru'), (1, 'web.szk-info.ru'), (2, 'iqsms.ru'), (3, 'infosmska.ru'), (4, 'smsc.ru'), (5, 'sms-sending.ru'), (6, 'sms-prosto.ru')], default=0, verbose_name='URL СМС провайдера'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='telegram_allow_sending_without_reply',
            field=models.BooleanField(default=False, verbose_name='Разрешить, если сообщение должно быть отправлено, даже если ответное сообщение не найдено'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='telegram_disable_notification',
            field=models.BooleanField(default=False, verbose_name='Пользователи получат уведомление без звука'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='telegram_disable_web_page_preview',
            field=models.BooleanField(default=False, verbose_name='Отключает предварительный просмотр ссылок в сообщениях'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='telegram_parse_mode',
            field=models.CharField(blank=True, choices=[('', 'Без форматирования'), ('HTML', 'HTML'), ('Markdown', 'Markdown')], default='', max_length=100, verbose_name='Тип парсера телеграм сообщений'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='telegram_timeout',
            field=models.FloatField(blank=True, default=None, null=True, verbose_name='Тайм-аут чтения с сервера'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='whatsapp_account_sid',
            field=models.CharField(blank=True, default='ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', max_length=255, verbose_name='WhatsApp Account SID'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='whatsapp_auth_token',
            field=models.CharField(blank=True, default='XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', max_length=255, verbose_name='WhatsApp Auth Token'),
        ),
        migrations.AddField(
            model_name='notifyconfig',
            name='whatsapp_sender',
            field=models.CharField(blank=True, default='', max_length=30, verbose_name='Телефон отправителя WhatsApp'),
        ),
        migrations.AddField(
            model_name='notifytemplate',
            name='is_delete_after',
            field=models.BooleanField(default=False, verbose_name='Удалять после отправки'),
        ),
        migrations.AddField(
            model_name='notifyuserlist',
            name='users',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Пользователи'),
        ),
        migrations.AlterField(
            model_name='notify',
            name='type',
            field=models.IntegerField(choices=[(0, 'E-mail'), (1, 'SMS'), (2, 'Push'), (3, 'Telegram'), (4, 'Viber'), (5, 'System'), (6, 'Call'), (7, 'WhatsApp')], verbose_name='Тип'),
        ),
        migrations.AlterField(
            model_name='notifyconfig',
            name='is_telegram_enabled',
            field=models.BooleanField(default=True, verbose_name='Разрешить отправку Telegram'),
        ),
        migrations.AlterField(
            model_name='notifytemplate',
            name='type',
            field=models.IntegerField(choices=[(0, 'E-mail'), (1, 'SMS'), (2, 'Push'), (3, 'Telegram'), (4, 'Viber'), (5, 'System'), (6, 'Call'), (7, 'WhatsApp')], verbose_name='Тип'),
        ),
        migrations.AlterField(
            model_name='notifytemplate',
            name='user_lists',
            field=models.ManyToManyField(blank=True, to='garpix_notify.NotifyUserList', verbose_name='Списки пользователей для рассылки'),
        ),
        migrations.AlterField(
            model_name='notifyuserlist',
            name='mail_to_all',
            field=models.BooleanField(default=False, verbose_name='Массовая рассылка для всех пользователей сайта'),
        ),
        migrations.AlterField(
            model_name='smtpaccount',
            name='host',
            field=models.CharField(default='smtp.yandex.com', max_length=255, verbose_name='Хост'),
        ),
        migrations.AlterField(
            model_name='smtpaccount',
            name='is_use_ssl',
            field=models.BooleanField(default=True, verbose_name='Использовать SSL?'),
        ),
        migrations.AlterField(
            model_name='smtpaccount',
            name='is_use_tls',
            field=models.BooleanField(default=False, verbose_name='Использовать TLS?'),
        ),
        migrations.AlterField(
            model_name='smtpaccount',
            name='port',
            field=models.IntegerField(default=465, verbose_name='Порт'),
        ),
        migrations.AlterField(
            model_name='smtpaccount',
            name='sender',
            field=models.CharField(blank=True, default='', max_length=255, verbose_name='Отправитель'),
        ),
        migrations.CreateModel(
            name='SystemNotifyErrorLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error', models.TextField(blank=True, default='', null=True, verbose_name='Ошибка')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('notify', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='garpix_notify.systemnotify', verbose_name='SystemNotify')),
            ],
            options={
                'verbose_name': 'Лог отправки системного уведомления',
                'verbose_name_plural': 'Логи отправки системных уведомлений',
            },
        ),
    ]
